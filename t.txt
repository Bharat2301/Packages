i have multi-format-converter folder in that i have i have dist folder then i have src folder in that i have __tests__ folder in that i have converter.test.ts file
import { FileConverter } from '../index';
import { readFile, writeFile } from 'fs/promises';
import { existsSync } from 'fs';

jest.mock('sharp', () => ({
  __esModule: true,
  default: jest.fn(() => ({
    toFormat: jest.fn().mockReturnThis(),
    toFile: jest.fn().mockResolvedValue(undefined)
  }))
}));
jest.mock('svgo', () => ({
  optimize: jest.fn(() => ({ data: '<svg>mocked</svg>' }))
}));
jest.mock('pdf2pic', () => ({
  fromBuffer: jest.fn(() => ({
    bulk: jest.fn().mockResolvedValue(undefined)
  }))
}));
jest.mock('pdf-parse', () => jest.fn(() => Promise.resolve({ text: 'mocked text' })));
jest.mock('fluent-ffmpeg', () => {
  const mockFfmpeg = jest.fn(() => ({
    toFormat: jest.fn().mockReturnThis(),
    on: jest.fn().mockImplementation(function (this: { save: () => void }, event: string, callback: () => void) {
      if (event === 'end') {
        callback();
      }
      return this;
    }),
    save: jest.fn().mockImplementation(() => {
      return Promise.resolve();
    })
  }));
  return mockFfmpeg;
});
jest.mock('fs/promises', () => ({
  readFile: jest.fn().mockResolvedValue(Buffer.from('mocked content')),
  writeFile: jest.fn().mockResolvedValue(undefined)
}));
jest.mock('fs', () => ({
  existsSync: jest.fn().mockReturnValue(true),
  mkdirSync: jest.fn()
}));

describe('FileConverter', () => {
  let converter: FileConverter;

  beforeEach(() => {
    converter = new FileConverter();
    jest.clearAllMocks();
  });

  test('convertImage should convert image to specified format', async () => {
    await converter.convertImage({ input: 'test.jpg', output: 'test.png', format: 'png' });
    expect(require('sharp')).toHaveBeenCalled();
  });

  test('convertImage should throw error for non-existent input', async () => {
    (require('fs').existsSync as jest.Mock).mockReturnValueOnce(false);
    await expect(
      converter.convertImage({ input: 'test.jpg', output: 'test.png', format: 'png' })
    ).rejects.toThrow('Input file test.jpg does not exist');
  });

  test('convertImage should throw error for unsupported format', async () => {
    await expect(
      converter.convertImage({ input: 'test.jpg', output: 'test.xyz', format: 'xyz' })
    ).rejects.toThrow('Unsupported image format');
  });

  test('compressSvg should compress SVG file', async () => {
    await converter.compressSvg({ input: 'test.svg', output: 'test.min.svg' });
    expect(require('svgo').optimize).toHaveBeenCalled();
  });

  test('compressSvg should throw error for non-existent input', async () => {
    (require('fs').existsSync as jest.Mock).mockReturnValueOnce(false);
    await expect(
      converter.compressSvg({ input: 'test.svg', output: 'test.min.svg' })
    ).rejects.toThrow('Input file test.svg does not exist');
  });

  test('pdfToImage should convert PDF to images', async () => {
    await converter.pdfToImage({ input: 'test.pdf', output: 'output_dir', format: 'png' });
    expect(require('pdf2pic').fromBuffer).toHaveBeenCalled();
  });

  test('pdfToImage should throw error for non-existent input', async () => {
    (require('fs').existsSync as jest.Mock).mockReturnValueOnce(false);
    await expect(
      converter.pdfToImage({ input: 'test.pdf', output: 'output_dir', format: 'png' })
    ).rejects.toThrow('Input file test.pdf does not exist');
  });

  test('pdfToImage should throw error for unsupported format', async () => {
    await expect(
      converter.pdfToImage({ input: 'test.pdf', output: 'output_dir', format: 'xyz' })
    ).rejects.toThrow('Unsupported format xyz');
  });

  test('pdfToWord should convert PDF to Word', async () => {
    await converter.pdfToWord({ input: 'test.pdf', output: 'test.docx' });
    expect(require('pdf-parse')).toHaveBeenCalled();
  });

  test('pdfToWord should throw error for non-existent input', async () => {
    (require('fs').existsSync as jest.Mock).mockReturnValueOnce(false);
    await expect(
      converter.pdfToWord({ input: 'test.pdf', output: 'test.docx' })
    ).rejects.toThrow('Input file test.pdf does not exist');
  });

  test('convertAudio should convert audio to specified format', async () => {
    await converter.convertAudio({ input: 'test.mp3', output: 'test.aac', format: 'aac' });
    expect(require('fluent-ffmpeg')).toHaveBeenCalled();
  });

  test('convertAudio should throw error for non-existent input', async () => {
    (require('fs').existsSync as jest.Mock).mockReturnValueOnce(false);
    await expect(
      converter.convertAudio({ input: 'test.mp3', output: 'test.aac', format: 'aac' })
    ).rejects.toThrow('Input file test.mp3 does not exist');
  });

  test('convertAudio should throw error for unsupported format', async () => {
    await expect(
      converter.convertAudio({ input: 'test.mp3', output: 'test.xyz', format: 'xyz' })
    ).rejects.toThrow('Unsupported audio format');
  });
});
then i have cli.ts file 
#!/usr/bin/env node

import { program } from 'commander';
import { FileConverter } from './index.js';

const converter = new FileConverter();

program
  .version('1.0.0')
  .description('Multi-format file converter CLI');

program
  .command('image')
  .description('Convert image files to formats: bmp, eps, ico, svg, tga, wbmp')
  .requiredOption('-i, --input <path>', 'Input file path')
  .requiredOption('-o, --output <path>', 'Output file path')
  .option('-f, --format <format>', 'Target format (bmp, eps, ico, svg, tga, wbmp)')
  .action(async (options: { input: string; output: string; format?: string }) => {
    try {
      await converter.convertImage(options);
    } catch (error: unknown) {
      console.error(`Error: ${error instanceof Error ? error.message : String(error)}`);
      console.error('Ensure the input file exists and you have write permissions for the output path.');
      process.exit(1);
    }
  });

program
  .command('compress-svg')
  .description('Compress SVG files')
  .requiredOption('-i, --input <path>', 'Input SVG file path')
  .requiredOption('-o, --output <path>', 'Output SVG file path')
  .action(async (options: { input: string; output: string }) => {
    try {
      await converter.compressSvg(options);
    } catch (error: unknown) {
      console.error(`Error: ${error instanceof Error ? error.message : String(error)}`);
      console.error('Ensure the input file exists and you have write permissions for the output path.');
      process.exit(1);
    }
  });

program
  .command('pdf-to-image')
  .description('Convert PDF to images (supported formats: png, jpg, jpeg)')
  .requiredOption('-i, --input <path>', 'Input PDF file path')
  .requiredOption('-o, --output <path>', 'Output directory for images')
  .option('-f, --format <format>', 'Image format (default: png)')
  .action(async (options: { input: string; output: string; format?: string }) => {
    try {
      await converter.pdfToImage(options);
    } catch (error: unknown) {
      console.error(`Error: ${error instanceof Error ? error.message : String(error)}`);
      console.error('Ensure the input file exists and you have write permissions for the output directory.');
      process.exit(1);
    }
  });

program
  .command('pdf-to-word')
  .description('Convert PDF to Word (text)')
  .requiredOption('-i, --input <path>', 'Input PDF file path')
  .requiredOption('-o, --output <path>', 'Output Word file path')
  .action(async (options: { input: string; output: string }) => {
    try {
      await converter.pdfToWord(options);
    } catch (error: unknown) {
      console.error(`Error: ${error instanceof Error ? error.message : String(error)}`);
      console.error('Ensure the input file exists and you have write permissions for the output path.');
      process.exit(1);
    }
  });

program
  .command('audio')
  .description('Convert audio files to formats: aac, aiff, m4v, mmf, wma, 3g2')
  .requiredOption('-i, --input <path>', 'Input audio file path')
  .requiredOption('-o, --output <path>', 'Output audio file path')
  .option('-f, --format <format>', 'Target format (aac, aiff, m4v, mmf, wma, 3g2)')
  .action(async (options: { input: string; output: string; format?: string }) => {
    try {
      await converter.convertAudio(options);
    } catch (error: unknown) {
      console.error(`Error: ${error instanceof Error ? error.message : String(error)}`);
      console.error('Ensure the input file exists and you have write permissions for the output path.');
      process.exit(1);
    }
  });

program.parse(process.argv);
then i have index.ts file 
import sharp from 'sharp';
import { optimize } from 'svgo';
import { fromBuffer } from 'pdf2pic';
import pdfParse from 'pdf-parse';
import ffmpeg from 'fluent-ffmpeg';
import { Document, Packer, Paragraph } from 'docx';
import { readFile, writeFile } from 'fs/promises';
import { basename, dirname } from 'path';
import { existsSync, mkdirSync } from 'fs';

interface ConversionOptions {
  input: string;
  output: string;
  format?: string;
}

export class FileConverter {
  async convertImage(options: ConversionOptions): Promise<void> {
    const { input, output, format } = options;
    if (!existsSync(input)) {
      throw new Error(`Input file ${input} does not exist`);
    }
    if (!format || !['bmp', 'eps', 'ico', 'svg', 'tga', 'wbmp'].includes(format)) {
      throw new Error('Unsupported image format. Supported: bmp, eps, ico, svg, tga, wbmp');
    }
    try {
      mkdirSync(dirname(output), { recursive: true });
      await sharp(input)
        .toFormat(format as keyof sharp.FormatEnum)
        .toFile(output);
      console.log(`Converted ${input} to ${output} (${format})`);
    } catch (error: unknown) {
      throw new Error(`Image conversion failed for ${input} to ${output} (${format}): ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  async compressSvg(options: ConversionOptions): Promise<void> {
    const { input, output } = options;
    if (!existsSync(input)) {
      throw new Error(`Input file ${input} does not exist`);
    }
    try {
      mkdirSync(dirname(output), { recursive: true });
      const svgContent = await readFile(input, 'utf-8');
      const result = optimize(svgContent, { multipass: true });
      await writeFile(output, result.data);
      console.log(`Compressed SVG from ${input} to ${output}`);
    } catch (error: unknown) {
      throw new Error(`SVG compression failed for ${input} to ${output}: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  async pdfToImage(options: ConversionOptions): Promise<void> {
    const { input, output, format = 'png' } = options;
    if (!existsSync(input)) {
      throw new Error(`Input file ${input} does not exist`);
    }
    if (!['png', 'jpg', 'jpeg'].includes(format)) {
      throw new Error(`Unsupported format ${format}. Supported: png, jpg, jpeg`);
    }
    try {
      mkdirSync(output, { recursive: true });
      const outputBaseName = basename(input, '.pdf');
      const convert = fromBuffer(await readFile(input), {
        density: 100,
        format,
        outPrefix: outputBaseName,
        outputDir: output
      } as any); // Type assertion to bypass TypeScript error
      await convert.bulk(-1);
      console.log(`Converted PDF ${input} to images in ${output}`);
    } catch (error: unknown) {
      throw new Error(`PDF to image conversion failed for ${input} to ${output} (${format}): ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  async pdfToWord(options: ConversionOptions): Promise<void> {
    const { input, output } = options;
    if (!existsSync(input)) {
      throw new Error(`Input file ${input} does not exist`);
    }
    try {
      mkdirSync(dirname(output), { recursive: true });
      const dataBuffer = await readFile(input);
      const data = await pdfParse(dataBuffer);
      const doc = new Document({
        sections: [{ children: [new Paragraph(data.text)] }]
      });
      const buffer = await Packer.toBuffer(doc);
      await writeFile(output, buffer);
      console.log(`Converted PDF ${input} to Word ${output}`);
    } catch (error: unknown) {
      throw new Error(`PDF to Word conversion failed for ${input} to ${output}: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  async convertAudio(options: ConversionOptions): Promise<void> {
    const { input, output, format } = options;
    if (!existsSync(input)) {
      throw new Error(`Input file ${input} does not exist`);
    }
    if (!format || !['aac', 'aiff', 'm4v', 'mmf', 'wma', '3g2'].includes(format)) {
      throw new Error('Unsupported audio format. Supported: aac, aiff, m4v, mmf, wma, 3g2');
    }
    try {
      mkdirSync(dirname(output), { recursive: true });
      await new Promise<void>((resolve, reject) => {
        ffmpeg(input)
          .toFormat(format)
          .on('end', () => {
            console.log(`Converted audio ${input} to ${output} (${format})`);
            resolve();
          })
          .on('error', (err) => reject(new Error(`Audio conversion failed: ${err.message}`)))
          .save(output);
      });
    } catch (error: unknown) {
      throw new Error(`Audio conversion failed for ${input} to ${output} (${format}): ${error instanceof Error ? error.message : String(error)}`);
    }
  }
}

export default FileConverter;
then i have package.json file 
{
  "name": "multi-format-converter",
  "version": "1.0.0",
  "description": "A Node.js package for converting image, PDF, and audio files, with SVG compression.",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "type": "module",
  "bin": {
    "multi-format-converter": "./dist/cli.js"
  },
  "scripts": {
    "build": "tsc",
    "start": "node dist/cli.js",
    "prepublishOnly": "npm run build",
    "test": "jest",
    "test:watch": "jest --watch",
    "lint": "eslint src --ext .ts"
  },
  "keywords": [
    "file-converter",
    "image-converter",
    "pdf-converter",
    "audio-converter",
    "svg-compressor"
  ],
  "author": "Bharath",
  "license": "MIT",
  "dependencies": {
    "commander": "^12.1.0",
    "docx": "^8.5.0",
    "fluent-ffmpeg": "^2.1.3",
    "pdf-parse": "^1.1.1",
    "pdf2pic": "^3.2.0",
    "sharp": "^0.33.5",
    "svgo": "^3.3.2"
  },
  "devDependencies": {
    "@types/fluent-ffmpeg": "^2.1.27",
    "@types/jest": "^29.5.13",
    "@types/node": "^22.7.4",
    "@types/pdf-parse": "^1.1.5",
    "@typescript-eslint/eslint-plugin": "^8.8.0",
    "@typescript-eslint/parser": "^8.8.0",
    "eslint": "^8.57.0",
    "jest": "^29.7.0",
    "ts-jest": "^29.2.5",
    "typescript": "^5.6.2"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Bharat2301/Packages.git"
  },
  "homepage": "https://github.com/Bharat2301/Packages.git#readme",
  "files": [
    "dist/**/*",
    "LICENSE",
    "README.md"
  ],
  "engines": {
    "node": ">=16"
  }
}
this is my multi-format-converter package i make give me full code with changes so it work 