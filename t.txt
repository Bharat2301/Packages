i have multi-format-convertor folder 
in that i have src folder in that i have cli.ts file 
#!/usr/bin/env node

import { program } from 'commander';
import { FileConverter } from './index.js';

const converter = new FileConverter();

program
  .version('1.0.0')
  .description('Multi-format file converter CLI');

program
  .command('image')
  .description('Convert image files')
  .option('-i, --input <path>', 'Input file path')
  .option('-o, --output <path>', 'Output file path')
  .option('-f, --format <format>', 'Target format (bmp, ico, tga, wbmp, svg)')
  .action(async (options) => {
    try {
      await converter.convertImage(options);
    } catch (error) {
      if (error instanceof Error) {
        console.error(error.message);
      } else {
        console.error(String(error));
      }
      process.exit(1);
    }
  });

program
  .command('compress-svg')
  .description('Compress SVG files')
  .option('-i, --input <path>', 'Input SVG file path')
  .option('-o, --output <path>', 'Output SVG file path')
  .action(async (options) => {
    try {
      await converter.compressSvg(options);
    } catch (error) {
      if (error instanceof Error) {
        console.error(error.message);
      } else {
        console.error(String(error));
      }
      process.exit(1);
    }
  });

program
  .command('pdf-to-image')
  .description('Convert PDF to images')
  .option('-i, --input <path>', 'Input PDF file path')
  .option('-o, --output <path>', 'Output directory for images')
  .option('-f, --format <format>', 'Image format (default: png)')
  .action(async (options) => {
    try {
      await converter.pdfToImage(options);
    } catch (error) {
      if (error instanceof Error) {
        console.error(error.message);
      } else {
        console.error(String(error));
      }
      process.exit(1);
    }
  });

program
  .command('pdf-to-word')
  .description('Convert PDF to Word (text)')
  .option('-i, --input <path>', 'Input PDF file path')
  .option('-o, --output <path>', 'Output Word file path')
  .action(async (options) => {
    try {
      await converter.pdfToWord(options);
    } catch (error) {
      if (error instanceof Error) {
        console.error(error.message);
      } else {
        console.error(String(error));
      }
      process.exit(1);
    }
  });

program
  .command('audio')
  .description('Convert audio files')
  .option('-i, --input <path>', 'Input audio file path')
  .option('-o, --output <path>', 'Output audio file path')
  .option('-f, --format <format>', 'Target format (aac, aiff, m4v, mmf, wma, 3g2)')
  .action(async (options) => {
    try {
      await converter.convertAudio(options);
    } catch (error) {
      if (error instanceof Error) {
        console.error(error.message);
      } else {
        console.error(String(error));
      }
      process.exit(1);
    }
  });

program.parse(process.argv);
then i have index.ts file 

   import sharp from 'sharp';
   import { optimize } from 'svgo';
   import { fromBuffer } from 'pdf2pic';
   import pdfParse from 'pdf-parse';
   import ffmpeg from 'fluent-ffmpeg';
   import { Document, Packer, Paragraph } from 'docx';
   import { readFile, writeFile } from 'fs/promises';

   interface ConversionOptions {
     input: string;
     output: string;
     format?: string;
   }

   export class FileConverter {
     // Image Conversion (BMP, ICO, TGA, WBMP, SVG)
     async convertImage(options: ConversionOptions): Promise<void> {
       const { input, output, format } = options;
       if (!format || !['bmp', 'ico', 'tga', 'wbmp', 'svg'].includes(format)) {
         throw new Error('Unsupported image format. Supported: bmp, ico, tga, wbmp, svg');
       }
       try {
         await sharp(input)
           .toFormat(format as any)
           .toFile(output);
         console.log(`Converted ${input} to ${output} (${format})`);
       } catch (error) {
         const message = error instanceof Error ? error.message : String(error);
         throw new Error(`Image conversion failed: ${message}`);
       }
     }

     // SVG Compression
     async compressSvg(options: ConversionOptions): Promise<void> {
       const { input, output } = options;
       try {
         const svgContent = await readFile(input, 'utf-8');
         const result = optimize(svgContent, { multipass: true });
         await writeFile(output, result.data);
         console.log(`Compressed SVG from ${input} to ${output}`);
       } catch (error) {
         const message = error instanceof Error ? error.message : String(error);
         throw new Error(`SVG compression failed: ${message}`);
       }
     }

     // PDF to Image
     async pdfToImage(options: ConversionOptions): Promise<void> {
       const { input, output, format = 'png' } = options;
       try {
         const convert = fromBuffer(await readFile(input), {
           density: 100,
           format
         });
         await convert.bulk(-1, true, false, output);
         console.log(`Converted PDF ${input} to images in ${output}`);
       } catch (error) {
         throw new Error(`PDF to image conversion failed: ${error.message}`);
       }
     }

     // PDF to Word (Text Extraction)
     async pdfToWord(options: ConversionOptions): Promise<void> {
       const { input, output } = options;
       try {
         const dataBuffer = await readFile(input);
         const data = await pdfParse(dataBuffer);
         const doc = new Document({
           sections: [{ children: [new Paragraph(data.text)] }]
         });
         const buffer = await Packer.toBuffer(doc);
         await writeFile(output, buffer);
         console.log(`Converted PDF ${input} to Word ${output}`);
       } catch (error) {
         throw new Error(`PDF to Word conversion failed: ${error.message}`);
       }
     }

     // Audio Conversion
     async convertAudio(options: ConversionOptions): Promise<void> {
       const { input, output, format } = options;
       if (!format || !['aac', 'aiff', 'm4v', 'mmf', 'wma', '3g2'].includes(format)) {
         throw new Error('Unsupported audio format. Supported: aac, aiff, m4v, mmf, wma, 3g2');
       }
       try {
         await new Promise((resolve, reject) => {
           ffmpeg(input)
             .toFormat(format)
             .on('end', () => resolve(`Converted ${input} to ${output} (${format})`))
             .on('error', (err) => reject(new Error(`Audio conversion failed: ${err.message}`)))
             .save(output);
         });
         console.log(`Converted audio ${input} to ${output} (${format})`);
       } catch (error) {
         throw new Error(`Audio conversion failed: ${error.message}`);
       }
     }
   }

   export default FileConverter;
 Expected 0-2 arguments, but got 4.
 'error' is of type 'unknown'.
 'error' is of type 'unknown'.
 'error' is of type 'unknown'.
 Cannot find name 'Expected'. Did you mean 'expect'?
 Cannot find name 'Expected'. Did you mean 'expect'? 
 then i have package.json file 
 {
  "name": "multi-format-converter",
  "version": "1.0.0",
  "description": "A Node.js package for converting image, PDF, and audio files, with SVG compression.",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "type": "module",
  "bin": {
    "multi-format-converter": "./dist/cli.js"
  },
  "scripts": {
    "build": "tsc",
    "start": "node dist/cli.js",
    "prepublishOnly": "npm run build",
    "test": "jest"
  },
  "keywords": [
    "file-converter",
    "image-converter",
    "pdf-converter",
    "audio-converter",
    "svg-compressor"
  ],
  "author": "Your Name",
  "license": "MIT",
  "dependencies": {
    "commander": "^12.1.0",
    "docx": "^8.5.0",
    "fluent-ffmpeg": "^2.1.3",
    "pdf-parse": "^1.1.1",
    "pdf2pic": "^3.1.1",
    "sharp": "^0.33.5",
    "svgo": "^3.3.2"
  },
  "devDependencies": {
    "@types/fluent-ffmpeg": "^2.1.27",
    "@types/jest": "^29.5.13",
    "@types/node": "^22.7.4",
    "@types/pdf-parse": "^1.1.5",
    "jest": "^29.7.0",
    "ts-jest": "^29.2.5",
    "typescript": "^5.6.2"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yourusername/multi-format-converter.git"
  },
  "homepage": "https://github.com/yourusername/multi-format-converter#readme"
}
then i have tsconfig.json file 
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ESNext",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "declaration": true,
    "moduleResolution": "node"
  }
} 

1) image section - BMP , EPS , ico , svg , tga , wbmp 
 2) compressor section  - svg
3) pdf section - pdf to img,pdf to word 

4) audio - aac , aiff , m4v ,mmf  , wma ,  3g2





i want to npm package for this convertor i share u 